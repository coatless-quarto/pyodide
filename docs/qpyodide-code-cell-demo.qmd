---
title: "Python Interactive Code Cells"
subtitle: "Demos showing interactive use cases of Python in Your Quarto Documents"
author: "James Balamuta"
date: "08-08-2023"
format: 
  html:
    toc: true
---

Welcome to the world of interactive code cells, unlocked by the `quarto-pyodide` extension. 
These cells allow you to run Python code directly within your Quarto HTML documents, enabling real-time computations and more. Let's explore the impressive capabilities `pyodide` offers.
pyodide-enabled code cell are established by using `{pyodide-python}` in a Quarto HTML document.

# Creating pyodide-Enabled Code Cells

To create a pyodide-enabled code cell, simply use the `{pyodide-python}` tag in your Quarto HTML document, like this:

```{pyodide-python}
1 + 1
```

For example, the code cell above, powered by `pyodide`, was generated by entering the following into the Quarto document:

```{{pyodide-python}}
1 + 1
```

# Sample Use Cases

Now, let's delve into some practical scenarios where interactive code cells shine.

## Sample Calculations

Let's start off with a quick calculation 

```{pyodide-python}
1 + 1
```

## Strings

Viewing string data

```{pyodide-python}
greet = 'Hello'
greet
```

## Retrieving prior objects

Checking string length

```{pyodide-python}
len(greet)
```


## Line-by-line Execution

In this section, we'll explore the built-in keyboard shortcuts for executing code within the interactive code cell. You can run either the selected code or specific lines or the entire cell with the following keyboard shortcuts:

- Run selected code:
  - macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>
  - Windows/Linux: <kbd>Ctrl</kbd> + <kbd>↩/Enter</kbd>

- To run the entire code cell, you can simply click the "Run code" button, or use the keyboard shortcut:
  - <kbd>Shift</kbd> + <kbd>↩</kbd>

Feel free to try it out in the following code cell:

```{pyodide-python}
# Try running selected code at the start of the line
print("Hello quarto-pyodide World!")

# Try highlight only -3 or 5 and pressing the keys required
# for the "selected code" approach
-3 + 5

# Finally, try running the entire code cell by using Shift + ↩
```

By using these shortcuts, you can run code conveniently and efficiently. This practice can also help you become familiar with keyboard shortcuts when transitioning to integrated development environments (IDEs) like [RStudio](https://posit.co/products/open-source/rstudio/) or [Visual Studio Code with Python](https://code.visualstudio.com/docs/languages/python).


## Preventing Modifications to Code

Code cells can be locked to their initial state by specifying `#| read-only: true`. 

::: {.panel-tabset}
## `{quarto-pyodide}` Output

```{pyodide-python}
#| read-only: true
1 + 1
```

## Cell code

```{{pyodide-python}}
#| read-only: true
1 + 1
```
:::


## Define and Call Functions

Functions can be defined in one cell and called. 

```{pyodide-python}
def square(x):
    return x**2

square(8)
```

Similarly, they persist to other cells.

```{pyodide-python}
num_list = [1, 2, 3]
[square(num)for num in num_list]
```


## Load a package

We've enabled _dynamic_ package detection to handle importing packages into the environment. The _dynamic_ part comes from detecting whether a non-core Python package is used, installing, and, then, importing it.

:::{.callout-note}
Importing a package for the first time will require more time. Subsequent import statements will be resolve quicker.
:::

```{pyodide-python}
import pandas as pd

df = pd.DataFrame({
  'Name': ['JJB', 'H', 'Alex', 'Steve'],
  'Age': [18, 25, 33, 42]
})

df
```

```{pyodide-python}
import pandas as pd 

df.Age
```

## Graphing

We provide support for generating graphs through the interactive HTML5 backend, e.g. [`module://matplotlib_pyodide.html5_canvas_backend`](https://github.com/pyodide/matplotlib-pyodide). At the end of each graph call, you must include a `plt.show()` call for the graph to render.

```{pyodide-python}
import matplotlib.pyplot as plt

x = [1, 5, 3, -2]
y = [-5, 8, 9, 4]

plt.plot(x, y)
plt.show()
```
