[
  {
    "objectID": "qpyodide-deployment-templates.html",
    "href": "qpyodide-deployment-templates.html",
    "title": "Deployment Templates",
    "section": "",
    "text": "Discover a range of sample deployment templates for the quarto-pyodide extension at our GitHub repository here. These templates serve as convenient starting points for various web-based projects that harness the power of the quarto-pyodide extension, enabling interactive Python code cells inside of a web browser. Whether you’re embarking on an individual report, creating an interactive website, or compiling a digital book, these templates simplify the process, making it effortless to kickstart your own projects.\n\nHTML Document Template\nThis template is designed for creating standalone HTML documents with interactive Pyodide functionality. It’s suitable for individual reports or interactive documents.\n\nExample: You can find an example of an HTML document template here.\nSource Code: Access the source code for this template here.\n\n\n\nRevealJS Presentation Template\nThis template is designed for creating standalone RevealJS presentations with interactive Pyodide functionality. It’s suitable for creating lecture slides.\n\nExample: You can find an example of a RevealJS presentation template here.\nSource Code: Access the source code for this template here.\n\n\n\nWebsite Template\nThis template is meant for building interactive websites with multiple Pyodide-powered pages. It’s ideal for websites that have multiple piece of web content that requires interactive data analysis at the “top-level”.\n\nExample: Explore an example of a website template here.\nSource Code: Access the source code for this template here.\n\n\n\nBlog Template\nFor users who want to periodically use Pyodide on their Quarto blog, please use the following template.\n\nExample: Explore an example of a blog website template here.\nSource Code: Access the source code for this template here.\n\n\n\nBook Template\nThe book template is designed for creating interactive web-based books or documentation. It allows you to compile a collection of chapters, sections, and interactive content into a cohesive digital book.\n\nExample: You can view an example of a book template here.\nSource Code: Access the source code for this template here.\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis Quarto extension is open source software and is not affiliated with Posit, Quarto, or Pyodide. The extension is at best a community effort to simplify the integration of Pyodide inside of Quarto generated documents.",
    "crumbs": [
      "Deployment",
      "Templates"
    ]
  },
  {
    "objectID": "qpyodide-dev-notes.html",
    "href": "qpyodide-dev-notes.html",
    "title": "quarto-pyodide",
    "section": "",
    "text": "Pyodide\n\nUsing Pyodide\n\nQuarto Extensions\n\nquarto-ext/shinylive\nmcanouil/quarto-elevator\nshafayetShafee/downloadthis\n\nQuarto Documentation\n\nFilters Documentation\nLua Development Tips\nLua API\n\nPandoc Documentation\n\nExample Filters\nCodeBlock\n\nmatplotlib patches\n\ngzuidhof/starboard-notebook graphics patch\njupyterlite/pyodide-kernel graphics patch\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis Quarto extension is open source software and is not affiliated with Posit, Quarto, or Pyodide. The extension is at best a community effort to simplify the integration of Pyodide inside of Quarto generated documents."
  },
  {
    "objectID": "qpyodide-faq.html",
    "href": "qpyodide-faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Welcome to our Frequently Asked Questions (FAQ) page, your go-to resource for finding answers to common queries about the quarto-pyodide extension. If you can’t find the answer you’re looking for, don’t hesitate to reach out to our community for additional support by opening a question or a bug report on the issue tracker.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#what-is-quarto",
    "href": "qpyodide-faq.html#what-is-quarto",
    "title": "Frequently Asked Questions",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a versatile, open-source scientific and technical publishing system. Documents can be authored that contain prose alongside of dynamic content generated by running Python, R, Julia, and Observable code.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#what-is-the-quarto-pyodide-extension-for-quarto",
    "href": "qpyodide-faq.html#what-is-the-quarto-pyodide-extension-for-quarto",
    "title": "Frequently Asked Questions",
    "section": "What is the quarto-pyodide extension for Quarto?",
    "text": "What is the quarto-pyodide extension for Quarto?\nThe quarto-pyodide extension is a tool designed to embed interactive Python cells within an HTML document using Pyodide. This is possible because Pyodide is a Python runtime that runs entirely in the browser.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#how-quarto-extension-works",
    "href": "qpyodide-faq.html#how-quarto-extension-works",
    "title": "Frequently Asked Questions",
    "section": "How Quarto Extension Works",
    "text": "How Quarto Extension Works\n\nHow does the Quarto extension work?\nThe Quarto extension works by providing a convenient syntax to embed Python code cells directly within a Quarto document. These Python cells are then executed using Pyodide, and the results are displayed directly in the HTML document. This allows for interactive and dynamic content creation.\n\n\nWhat are the key features of the Quarto extension?\nThe key features of the Quarto extension include:\n\nSeamless integration of Python code within an HTML document.\nInteractive execution of Python cells using Pyodide.\nReal-time display of Python code outputs, including plots and visualizations.\nSupport for data analysis, scientific computing, and interactive storytelling.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#installation",
    "href": "qpyodide-faq.html#installation",
    "title": "Frequently Asked Questions",
    "section": "Installation",
    "text": "Installation\n\nHow do I install the Quarto extension?\nTo install the Quarto extension, please see our installation page.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#packages",
    "href": "qpyodide-faq.html#packages",
    "title": "Frequently Asked Questions",
    "section": "Packages",
    "text": "Packages\n\nCan I use external libraries and packages in my Python cells?\nYes, you can use external libraries and packages within your Python cells. Pyodide includes a wide range of pre-installed libraries. These libraries can be downloaded and used on the fly once they are detected in an import statement.\nYou can also install additional packages by using the micropip package loaded at the start of each Pyodide session. These packages can either be pure Python packages (denoted by *py3-none-any.whl on PyPI) or Python packages compiled for Pyodide (denoted by *-cp310-cp310-emscripten_3_1_27_wasm32.whl that require a specific Python and Emscripten versions). For instance, the following will download and install the seaborn visualization library.\nimport micropip\nmicropip.install(\"seaborn\")\nOnce done, please make sure to import the package:\nimport seaborn as sns\nMore details can be found on Pyodide’s Loading package documentation.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#sharing-documents",
    "href": "qpyodide-faq.html#sharing-documents",
    "title": "Frequently Asked Questions",
    "section": "Sharing Documents",
    "text": "Sharing Documents\n\nCan I share my Quarto document with others who may not have Python installed?\nYes, one of the advantages of using Pyodide is that it runs entirely in the browser, eliminating the need for users to have Python installed locally. You can easily share your Quarto document with others, and they can interact with the embedded Python cells directly in their web browser.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#documentation-and-resources",
    "href": "qpyodide-faq.html#documentation-and-resources",
    "title": "Frequently Asked Questions",
    "section": "Documentation and Resources",
    "text": "Documentation and Resources\n\nWhere can I find more documentation and examples for the Quarto extension?\nYou can find additional documentation and examples on this website. Moreover, you can learn more about Quarto by visiting their documentation website at Quarto. Additionally, you can explore the Pyodide documentation for more information on Python in the browser.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-faq.html#limitations-and-considerations",
    "href": "qpyodide-faq.html#limitations-and-considerations",
    "title": "Frequently Asked Questions",
    "section": "Limitations and Considerations",
    "text": "Limitations and Considerations\n\nAre there any limitations to using Pyodide with the Quarto extension?\nWhile Pyodide is a powerful tool, there are some limitations. Not all Python packages are available in Pyodide, and performance may vary for computationally intensive tasks. However, for a wide range of data analysis and visualization tasks, Pyodide and the Quarto extension provide a robust solution.\n\n\nHow does the Quarto extension differ from other similar libraries like pyscript and Thebe?\nWhile Pyscript and Thebe also provide solutions for embedding interactive code in HTML documents, the Quarto extension distinguishes itself by leveraging Pyodide directly. When compared to Thebe, the Pyodide approach places the computation on the users computer through additional data needing to be downloaded. With respect to Pyscript, the pyodide approach simplifies the feature set present to allow for greater customization. The choice between these tools may depend on specific use cases and preferences.",
    "crumbs": [
      "Support",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "qpyodide-first-steps.html",
    "href": "qpyodide-first-steps.html",
    "title": "Making your first Pyodide-powered Quarto document",
    "section": "",
    "text": "To use this extension in a Quarto project, install it from within the project’s working directory by typing into Terminal:\nquarto add coatless-quarto/pyodide\n\n\n\n\n\n\nNote\n\n\n\nQuarto extensions are project-specific installations and are not stored in a global library. This means that for every new Quarto project or directory where you create a Quarto Document, you’ll need to install the extension again.",
    "crumbs": [
      "Getting Started",
      "Your first Pyodide-powered Quarto document"
    ]
  },
  {
    "objectID": "qpyodide-first-steps.html#installation",
    "href": "qpyodide-first-steps.html#installation",
    "title": "Making your first Pyodide-powered Quarto document",
    "section": "",
    "text": "To use this extension in a Quarto project, install it from within the project’s working directory by typing into Terminal:\nquarto add coatless-quarto/pyodide\n\n\n\n\n\n\nNote\n\n\n\nQuarto extensions are project-specific installations and are not stored in a global library. This means that for every new Quarto project or directory where you create a Quarto Document, you’ll need to install the extension again.",
    "crumbs": [
      "Getting Started",
      "Your first Pyodide-powered Quarto document"
    ]
  },
  {
    "objectID": "qpyodide-first-steps.html#usage",
    "href": "qpyodide-first-steps.html#usage",
    "title": "Making your first Pyodide-powered Quarto document",
    "section": "Usage",
    "text": "Usage\nOnce the extension is successfully installed, you can begin utilizing it in your Quarto documents located within the same working directory as the _extensions folder. To activate the Pyodide functionality in those documents, follow these steps:\n\nAdd pyodide Filter: In the header of your Quarto document, add the pyodide filter to the list of filters:\n\nfilters:\n  - pyodide\n\nUse {pyodide-python} Code Blocks: Write your Python code within code blocks marked with {pyodide-python}. Here’s an example:\n\n---\ntitle: Pyodide in Quarto HTML Documents\nformat: html\nfilters:\n  - pyodide\n---\n\nThis is a Pyodide-enabled code cell in a Quarto HTML document.\n\n```{pyodide-python}\nn = 5\nwhile n &gt; 0:\n  print(n)\n  n = n - 1\n\nprint('Blastoff!')\n```\n\nRender Your Document: You can now render your Quarto document by clicking on the Preview button in the upper right side of the markdown editor window (or use the keyboard shortcut ⇧⌘K on macOS or Ctrl+Shift+K on Windows/Linux). The document will execute under engine: jupyter by default, but you can specify a different engine like knitr if needed.\n\n\n\n\n\n\n\nNote\n\n\n\nIf an engine is not specified, Quarto will attempt to use the jupyter compute engine by default. This may cause an error if jupyter is not installed on your computer.\n\n\n\nExplore interactivity: Try out the rendered code cell by pressing the “Run Code” button or using a keyboard shortcut of Shift + ↩︎.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Your first Pyodide-powered Quarto document"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html",
    "href": "qpyodide-code-cell-demo.html",
    "title": "Python Interactive Code Cells",
    "section": "",
    "text": "Welcome to the world of interactive code cells, unlocked by the quarto-pyodide extension. These cells allow you to run Python code directly within your Quarto HTML documents, enabling real-time computations and more. Let’s explore the impressive capabilities pyodide offers. pyodide-enabled code cell are established by using {pyodide-python} in a Quarto HTML document.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#sample-calculations",
    "href": "qpyodide-code-cell-demo.html#sample-calculations",
    "title": "Python Interactive Code Cells",
    "section": "Sample Calculations",
    "text": "Sample Calculations\nLet’s start off with a quick calculation\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#strings",
    "href": "qpyodide-code-cell-demo.html#strings",
    "title": "Python Interactive Code Cells",
    "section": "Strings",
    "text": "Strings\nViewing string data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#retrieving-prior-objects",
    "href": "qpyodide-code-cell-demo.html#retrieving-prior-objects",
    "title": "Python Interactive Code Cells",
    "section": "Retrieving prior objects",
    "text": "Retrieving prior objects\nChecking string length\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#line-by-line-execution",
    "href": "qpyodide-code-cell-demo.html#line-by-line-execution",
    "title": "Python Interactive Code Cells",
    "section": "Line-by-line Execution",
    "text": "Line-by-line Execution\nIn this section, we’ll explore the built-in keyboard shortcuts for executing code within the interactive code cell. You can run either the selected code or specific lines or the entire cell with the following keyboard shortcuts:\n\nRun selected code:\n\nmacOS: ⌘ + ↩︎/Return\nWindows/Linux: Ctrl + ↩︎/Enter\n\nTo run the entire code cell, you can simply click the “Run code” button, or use the keyboard shortcut:\n\nShift + ↩︎\n\n\nFeel free to try it out in the following code cell:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBy using these shortcuts, you can run code conveniently and efficiently. This practice can also help you become familiar with keyboard shortcuts when transitioning to integrated development environments (IDEs) like RStudio or Visual Studio Code with Python.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#preventing-modifications-to-code",
    "href": "qpyodide-code-cell-demo.html#preventing-modifications-to-code",
    "title": "Python Interactive Code Cells",
    "section": "Preventing Modifications to Code",
    "text": "Preventing Modifications to Code\nCode cells can be locked to their initial state by specifying #| read-only: true.\n\n{quarto-pyodide} OutputCell code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{pyodide-python}\n#| read-only: true\n1 + 1\n```",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#define-and-call-functions",
    "href": "qpyodide-code-cell-demo.html#define-and-call-functions",
    "title": "Python Interactive Code Cells",
    "section": "Define and Call Functions",
    "text": "Define and Call Functions\nFunctions can be defined in one cell and called.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSimilarly, they persist to other cells.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#load-a-package",
    "href": "qpyodide-code-cell-demo.html#load-a-package",
    "title": "Python Interactive Code Cells",
    "section": "Load a package",
    "text": "Load a package\nThere are two types of Python packages that will work within an interactive cell.\n\npure Python packages\n\ndenoted by *py3-none-any.whl on PyPI\n\nPython packages compiled for Pyodide\n\ndenoted by *-cp310-cp310-emscripten_3_1_27_wasm32.whl that require a specific Python and Emscripten versions\n\n\nThe latter option makes up part of the Pyodide “core” or “base” set of Python packages.\n\n\n\n\n\n\nImportant\n\n\n\nNot all functionality of a Python package may be available in the browser due to limitations or different versions being present.\n\n\n\nLoading a Pyodide core package\nFor packages that are part of Pyodide core, we’ve enabled dynamic package detection to handle importing packages into the environment. The dynamic part comes from detecting whether a Python package is being used through an import statement and automatically taking care of the installation process behind the scenes.\n\n\n\n\n\n\nNote\n\n\n\nImporting a package for the first time will require more time. Subsequent import statements will be resolve quicker.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLoading non-core Pyodide Python Packages\nIn the above example, everything just worked as pandas in available as part of Pyodide’s built-in packages. However, if we need a package that is not part of the built-in list, then there either needs to be a pure Python wheel (no compiled code present) or a specially compiled version of the Package for Python.\nIn this case, we can install the palmerpenguins package from PyPI with:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThen, we have:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#graphing",
    "href": "qpyodide-code-cell-demo.html#graphing",
    "title": "Python Interactive Code Cells",
    "section": "Graphing",
    "text": "Graphing\nWe provide support for generating graphs through the interactive HTML5 backend, e.g. module://matplotlib_pyodide.html5_canvas_backend. At the end of each graph call, you must include a plt.show() call for the graph to render.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-code-cell-demo.html#external-data",
    "href": "qpyodide-code-cell-demo.html#external-data",
    "title": "Python Interactive Code Cells",
    "section": "External Data",
    "text": "External Data\nInteractive cells also allow for a limited subset of operations when working with external data. For example, we can use Pandas’ read_csv() function to ingest data from a URL.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Demos",
      "Pyodide Interactive Cell Demo"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html",
    "href": "qpyodide-release-notes.html",
    "title": "Release Notes",
    "section": "",
    "text": "Updated the version of Pyodide from 0.26.2 to 0.27.2 (#26)\nNew code cell option that set the interactive cell to be read-only. (#4)\n\n\n\n\n\nUpdated the version of Pyodide from 0.25.0 to 0.26.1 (#20)\nWe now load the micropip and pyodide_http packages during document initialization.\n\nmicropip package allows for installation of pure Python or Pyodide-compiled Python packages. (#3)\npyodide_http provides the necessary shims to ensure uses of requests and urllib3 are able to be processed instead of returning a URL error. (#9)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html#features",
    "href": "qpyodide-release-notes.html#features",
    "title": "Release Notes",
    "section": "",
    "text": "Updated the version of Pyodide from 0.26.2 to 0.27.2 (#26)\nNew code cell option that set the interactive cell to be read-only. (#4)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html#changes",
    "href": "qpyodide-release-notes.html#changes",
    "title": "Release Notes",
    "section": "",
    "text": "Updated the version of Pyodide from 0.25.0 to 0.26.1 (#20)\nWe now load the micropip and pyodide_http packages during document initialization.\n\nmicropip package allows for installation of pure Python or Pyodide-compiled Python packages. (#3)\npyodide_http provides the necessary shims to ensure uses of requests and urllib3 are able to be processed instead of returning a URL error. (#9)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html#features-1",
    "href": "qpyodide-release-notes.html#features-1",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nEnable an interactive Python code cells using Pyodide inside of a Quarto document.\n\nThis is a pyodide code cell in a Quarto document. \n\n```{pyodide-python}\ndef say_hello(name):\n  print(f\"Hello there {name}\"!)\n```\n\nExecute code in the code cell using keyboard shortcuts:\n\nRun selected code using: [Cmd + Enter] on macOS or [Ctrl+Enter] on Windows\nRun the entire code area using: [Shift+Enter]",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html#documentation",
    "href": "qpyodide-release-notes.html#documentation",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nProvided an extension documentation website at: https://quarto.thecoatlessprofessor.com/pyodide\nIncluded several deployment templates.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qpyodide-release-notes.html#features-2",
    "href": "qpyodide-release-notes.html#features-2",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nAn initial proof of concept of the code cell.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello from quarto-pyodide!",
    "section": "",
    "text": "Welcome to the documentation site for the quarto-pyodide extension – your key to unlocking the endless possibilities of Pyodide within various Quarto formats, including HTML, RevealJS, Websites, Blogs, and Books.\nReady for an exciting journey into the world of Pyodide’s interactive code cells? Click the “Run Code” button below to experience it firsthand:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAt its core, the quarto-pyodide extension is designed to empower you to run Python code directly in your web browser using familiar reporting tools, all without the need for an external Python server. Moreover, the extension abstracts away the need to know HTML or JavaScript to use Pyodide. Just write Python code like you usually would! Though, it’s worth noting that you can also choose to unlock the full potential of Pyodide and create more complex applications independently by directly using Pyodide’s JavaScript API, granting you unparalleled freedom to harness the power of Python in innovative ways.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis Quarto extension is open source software and is not affiliated with Posit, Quarto, or Pyodide. The extension is at best a community effort to simplify the integration of Pyodide inside of Quarto generated documents."
  },
  {
    "objectID": "qpyodide-acknowledgements.html",
    "href": "qpyodide-acknowledgements.html",
    "title": "Acknowledgments and Collaborations",
    "section": "",
    "text": "We would like to express our heartfelt gratitude to several individuals and teams who played a pivotal role in bringing quarto-pyodide to life as an extension for Quarto. Without their dedication and contributions, this project would not have been possible.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qpyodide-acknowledgements.html#quarto-pyodide-extension-developers",
    "href": "qpyodide-acknowledgements.html#quarto-pyodide-extension-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "quarto-pyodide Extension Developers",
    "text": "quarto-pyodide Extension Developers\n\nJames Joseph Balamuta",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qpyodide-acknowledgements.html#pyodide-developers",
    "href": "qpyodide-acknowledgements.html#pyodide-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "pyodide Developers",
    "text": "pyodide Developers\n\nMichael Droettboom\nPyodide Contributors",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qpyodide-acknowledgements.html#quarto-team-assistance",
    "href": "qpyodide-acknowledgements.html#quarto-team-assistance",
    "title": "Acknowledgments and Collaborations",
    "section": "Quarto Team Assistance",
    "text": "Quarto Team Assistance\nWe would like to acknowledge the Quarto team for their assistance.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qpyodide-acknowledgements.html#inspirations",
    "href": "qpyodide-acknowledgements.html#inspirations",
    "title": "Acknowledgments and Collaborations",
    "section": "Inspirations",
    "text": "Inspirations\nOur project built upon the initial proof of concept for a standalone Quarto HTML document, made possible by the work of the coatless-r-n-d/pyodide-quarto-demo repository.\nWe would also like to thank George Stagg and his work on webR, which greatly contributed to moving forward with the quarto-webr extension that allowed interactive R code inside of Quarto.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  }
]